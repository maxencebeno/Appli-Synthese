/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package parametre;

import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import metier.Divorce;

/**
 *
 * @author maxencebeno
 */
public class AjouterDivorce extends javax.swing.JDialog {

    /**
     * Creates new form AjouterDivorce
     */
    public AjouterDivorce(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        listModelVIP1 = new javax.swing.DefaultListModel<>();
        divorce1.setModel(listModelVIP1);
        try {
            ajout.alimenterListeDivorce(listModelVIP1);
        } catch (Exception ex) {
            Logger.getLogger(AjoutPhoto.class.getName()).log(Level.SEVERE, null, ex);
        }

        divorce1.setSelectedIndex(0);

        listModelVIP2 = new javax.swing.DefaultListModel<>();
        divorce2.setModel(listModelVIP2);
        try {
            ajout.alimenterListeDivorce(listModelVIP2);
        } catch (Exception ex) {
            Logger.getLogger(AjoutPhoto.class.getName()).log(Level.SEVERE, null, ex);
        }

        divorce2.setSelectedIndex(0);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        dateDivorce = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        divorce1 = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        divorce2 = new javax.swing.JList();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        divorcer = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Date du divorce : ");

        jScrollPane1.setViewportView(divorce1);

        jScrollPane2.setViewportView(divorce2);

        jLabel2.setText("Nom du Vip 1 : ");

        jLabel3.setText("Nom du Vip 2 : ");

        divorcer.setText("Divorcer");
        divorcer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                divorcer(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(222, 222, 222)
                .addComponent(divorcer)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(79, 79, 79)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 93, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(111, 111, 111))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(155, 155, 155)
                                .addComponent(jLabel3))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(40, 40, 40)
                                .addComponent(dateDivorce, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(dateDivorce, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 76, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE))
                .addGap(66, 66, 66)
                .addComponent(divorcer)
                .addGap(29, 29, 29))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void divorcer(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_divorcer
        String vip1, vip2;
        String[] vipArray1;
        String[] vipArray2;
        String nomVip1, nomVip2, prenomVip1, prenomVip2;
        int numVip1 = 0, numVip2 = 0;
        boolean divorceSolo = false, dateFausse = false;

        String dateDuDivorce;
        dateDuDivorce = dateDivorce.getText();
        if (dateDuDivorce == null) {
            javax.swing.JOptionPane.showMessageDialog(
                    this,
                    "Erreur : vous n'avez pas entré de date pour ce mariage",
                    "Erreur",
                    javax.swing.JOptionPane.ERROR_MESSAGE
            );
        }

        vip1 = divorce1.getSelectedValue().toString();
        vip2 = divorce2.getSelectedValue().toString();

        vipArray1 = vip1.split(" ");
        nomVip1 = vipArray1[0];
        prenomVip1 = vipArray1[1];

        vipArray2 = vip2.split(" ");
        nomVip2 = vipArray2[0];
        prenomVip2 = vipArray2[1];

        try {
            numVip1 = ajout.searchVip(nomVip1, prenomVip1);
        } catch (Exception ex) {
            Logger.getLogger(AjouterMariage.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            numVip2 = ajout.searchVip(nomVip2, prenomVip2);
        } catch (Exception ex) {
            Logger.getLogger(AjouterMariage.class.getName()).log(Level.SEVERE, null, ex);
        }

        if (numVip1 == numVip2) {
            divorceSolo = true;
        }

        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        Date date1 = null;
        try {
            date1 = sdf.parse(dateDuDivorce);
        } catch (ParseException ex) {
            Logger.getLogger(AjouterDivorce.class.getName()).log(Level.SEVERE, null, ex);
        }
        Date date2 = null;
        try {
            date2 = sdf.parse(ajout.RecupDateDuMariage(numVip1, numVip2));
        } catch (Exception ex) {
            Logger.getLogger(AjouterDivorce.class.getName()).log(Level.SEVERE, null, ex);
        }

        if (date1.compareTo(date2) < 0) {
            dateFausse = true;
        } 

        if (divorceSolo == false && dateFausse == false) {
            int result = javax.swing.JOptionPane.showConfirmDialog(
                    this,
                    "Voici le divorce que vous êtes sur le point d'insérer : \n"
                    + nomVip1 + " "
                    + prenomVip1 + " est sur le point de se marier avec "
                    + nomVip2 + " "
                    + prenomVip2 + ".\n"
                    + "Ils se sont mariés le : "
                    + dateDuDivorce
                    + ".\nEtes vous sur de ceci?",
                    "Confirmation mariage",
                    javax.swing.JOptionPane.OK_CANCEL_OPTION
            );
            if (result == javax.swing.JOptionPane.OK_OPTION) {
                Divorce divorce;
                divorce = new Divorce();

                divorce.setDivorce1(numVip1);
                divorce.setDivorce2(numVip2);
                divorce.setDateDivorce(dateDuDivorce);

                Divorce divorce21;
                divorce21 = new Divorce();

                divorce21.setDivorce1(numVip2);
                divorce21.setDivorce2(numVip1);
                divorce21.setDateDivorce(dateDuDivorce);

                try {
                    ajout.insererUnDivorce(divorce);
                } catch (SQLException ex) {
                    Logger.getLogger(AjouterMariage.class.getName()).log(Level.SEVERE, null, ex);
                }

                try {
                    ajout.insererUnDivorce(divorce21);
                } catch (SQLException ex) {
                    Logger.getLogger(AjouterMariage.class.getName()).log(Level.SEVERE, null, ex);
                }
                dispose();
            }
        } else if (dateFausse == true) {
            javax.swing.JOptionPane.showMessageDialog(
                    this,
                    "Erreur, la date du divorce ne peut être antérieure à celle du mariage.",
                    "Conflits de divorce",
                    javax.swing.JOptionPane.ERROR_MESSAGE
            );
        } 
        else {
            javax.swing.JOptionPane.showMessageDialog(
                    this,
                    "Erreur, un vip ne peut pas se marier avec lui-même.",
                    "Conflits de divorce",
                    javax.swing.JOptionPane.ERROR_MESSAGE
            );
        }
    }//GEN-LAST:event_divorcer

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AjouterDivorce.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AjouterDivorce.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AjouterDivorce.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AjouterDivorce.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                AjouterDivorce dialog = new AjouterDivorce(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField dateDivorce;
    private javax.swing.JList divorce1;
    private javax.swing.JList divorce2;
    private javax.swing.JButton divorcer;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
    javax.swing.DefaultListModel<String> listModelVIP1;
    javax.swing.DefaultListModel<String> listModelVIP2;
    javax.swing.DefaultListModel<String> listModelCouples;
    AccesBD ajout = new AccesBD();
}

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package parametre;

import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import metier.Divorce;

/**
 *
 * Cette classe permet le divorce de deux vips, après toutes les vérifications
 * Les deux liste regroupes les vips déjà mariés.
 * Pour les divorcer, il faut regarder dans la jTable le partenanire d'un vip
 */
public class AjouterDivorce extends javax.swing.JDialog {

    /**
     * Creates new form AjouterDivorce
     */
    public AjouterDivorce(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        verif = false; // Permet de dire que l'utilisateur à tapé un mois à 31 jours
        fevrier = false; // Permet la vérification de février
        mois31 = false; // Permet de savoir si le mois possède 31 jours ou non
        novembre = false; // Novembre n'a que 30 jour et est un mois à 2 chiffre. Cela demande une autre vérification
        

        listModelCouples = new javax.swing.DefaultListModel<>();
        divorce1.setModel(listModelCouples);
        try {
            ajout.lireLesCouplesDivorce(listModelCouples);
        } catch (Exception ex) {
            Logger.getLogger(AjoutPhoto.class.getName()).log(Level.SEVERE, null, ex);
        }

        divorce1.setSelectedIndex(0);

        

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        dateDivorce = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        divorce1 = new javax.swing.JList();
        jLabel2 = new javax.swing.JLabel();
        divorcer = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Date du divorce : ");

        dateDivorce.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                gestionDate(evt);
            }
        });

        jScrollPane1.setViewportView(divorce1);

        jLabel2.setText("Nom du couple : ");

        divorcer.setText("Divorcer");
        divorcer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                divorcer(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(222, 222, 222)
                        .addComponent(divorcer))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(180, 180, 180)
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(79, 79, 79)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 460, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(40, 40, 40)
                                .addComponent(dateDivorce, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(64, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(dateDivorce, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 74, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(68, 68, 68)
                .addComponent(divorcer)
                .addGap(29, 29, 29))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void divorcer(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_divorcer
        String vip1;
        String[] vipArray1;
        String nomVip1, prenomVip1, nomVip2, prenomVip2;
        int numVip1 = 0, numVip2 = 0;
        boolean dateFausse = false, ajoutDivorce = false;

        String dateDuDivorce;
        dateDuDivorce = dateDivorce.getText();

        vip1 = divorce1.getSelectedValue().toString();

        vipArray1 = vip1.split(" ");
        nomVip1 = vipArray1[0];
        prenomVip1 = vipArray1[1];
        nomVip2 = vipArray1[4];
        prenomVip2 = vipArray1[5];
        
        try {
            numVip1 = ajout.searchVip(nomVip1, prenomVip1);
        } catch (Exception ex) {
            Logger.getLogger(AjouterMariage.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        try {
            numVip2 = ajout.searchVip(nomVip2, prenomVip2);
        } catch (Exception ex) {
            Logger.getLogger(AjouterMariage.class.getName()).log(Level.SEVERE, null, ex);
        }

        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        Date date1 = null;
        try {
            if (dateDuDivorce.compareTo("") == 0) {
                javax.swing.JOptionPane.showMessageDialog(
                        this,
                        "Erreur : vous n'avez pas entré de date pour ce divorce",
                        "Erreur",
                        javax.swing.JOptionPane.ERROR_MESSAGE
                );
            } else {
                date1 = sdf.parse(dateDuDivorce);
                ajoutDivorce = true;
            }
        } catch (ParseException ex) {
            Logger.getLogger(AjouterDivorce.class.getName()).log(Level.SEVERE, null, ex);
        }
        Date date2 = null;
        String dateDuMariage;
        try {
            dateDuMariage = ajout.RecupDateDuMariage(numVip1, numVip2);
            if (dateDuMariage.compareTo("aucun") != 0) {
                date2 = sdf.parse(dateDuMariage);
                if (date1.compareTo(date2) < 0) {
                    dateFausse = true;
                } else {
                    ajoutDivorce = true;
                    dateFausse = false;
                }
                ajoutDivorce = true;
                dateFausse = false;
            } else {
                javax.swing.JOptionPane.showMessageDialog(
                        this,
                        "Erreur : la date recherchée n'existe pas. Les Vips ne sont surement pas mariés entre eux",
                        "Erreur",
                        javax.swing.JOptionPane.ERROR_MESSAGE
                );
                ajoutDivorce = false;
            }
        } catch (Exception ex) {
            Logger.getLogger(AjouterDivorce.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.out.print(dateFausse);
        if (dateFausse == false && ajoutDivorce == true) {
            int result = javax.swing.JOptionPane.showConfirmDialog(
                    this,
                    "Voici le divorce que vous êtes sur le point d'insérer : \n"
                    + nomVip1 + " "
                    + prenomVip1 + " est sur le point de se marier avec "
                    + nomVip2 + " "
                    + prenomVip2 + ".\n"
                    + "Ils se sont mariés le : "
                    + dateDuDivorce
                    + ".\nEtes vous sur de ceci?",
                    "Confirmation mariage",
                    javax.swing.JOptionPane.OK_CANCEL_OPTION
            );
            if (result == javax.swing.JOptionPane.OK_OPTION) {
                Divorce divorce;
                divorce = new Divorce();

                divorce.setDivorce1(numVip1);
                divorce.setDivorce2(numVip2);
                divorce.setDateDivorce(dateDuDivorce);

                Divorce divorce21;
                divorce21 = new Divorce();

                divorce21.setDivorce1(numVip2);
                divorce21.setDivorce2(numVip1);
                divorce21.setDateDivorce(dateDuDivorce);

                try {
                    ajout.insererUnDivorce(divorce);
                } catch (SQLException ex) {
                    Logger.getLogger(AjouterMariage.class.getName()).log(Level.SEVERE, null, ex);
                }

                try {
                    ajout.insererUnDivorce(divorce21);
                } catch (SQLException ex) {
                    Logger.getLogger(AjouterMariage.class.getName()).log(Level.SEVERE, null, ex);
                }
                dispose();
            }
        } else if (dateFausse == true) {
            javax.swing.JOptionPane.showMessageDialog(
                    this,
                    "Erreur, la date du divorce ne peut être antérieure à celle du mariage.",
                    "Conflits de divorce",
                    javax.swing.JOptionPane.ERROR_MESSAGE
            );
        } else {
            javax.swing.JOptionPane.showMessageDialog(
                    this,
                    "Une erreur s'est produite",
                    "Conflits de divorce",
                    javax.swing.JOptionPane.ERROR_MESSAGE
            );
        }
    }//GEN-LAST:event_divorcer

    private void gestionDate(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_gestionDate
        char c = evt.getKeyChar();

        if (dateDivorce.getDocument().getLength() <= 10) { // Si l'utilisateur dépasse 10 caractère on s'arrête
            if (!Character.isDigit(c)) { // On ne peut taper que des chiffress
                evt.consume();
            }
            if (dateDivorce.getDocument().getLength() == 0) {
                if (c == '3') { // Si on tape 3 il faudra surement vérifier les mois à 31 jours et Février
                    verif = true;
                    fevrier = true;
                }
                
                if (c > '3') {
                    evt.consume();
                }
                verif = false; 
                fevrier = false;
            }
            if (dateDivorce.getDocument().getLength() == 1) {
                if (verif == true) { // Les mois à plus de 31 jours n'existent pas
                    if (c > '1') {
                        evt.consume();
                    }
                    if (c == '1') { // L'utilisateur a tapé 31, il faudra vérifier si le mois correspond
                        mois31 = true;
                    } else {
                        mois31 = false; 
                    }
                } else {
                    verif = false;
                    fevrier = false;
                    mois31 = false;
                }
            }
            if (dateDivorce.getDocument().getLength() == 2) {
                evt.setKeyChar('/'); // On aide l'utilisateur en mettant directement un slash
            }
            if (dateDivorce.getDocument().getLength() == 3) {
                if (c == '1') {
                    verif = true;
                    fevrier = false;
                    novembre = true; // Novembre est le mois 11, seulement il n'a que 30 jour, on anticipe donc l'erreur
                } else {
                    verif = false;
                    fevrier = false;
                }
                if (c > '1') {
                    evt.consume();
                }
                if (c == '0') {
                    fevrier = true;
                    mois31 = true;
                }
            }
            if (dateDivorce.getDocument().getLength() == 4) {
                if (verif == true) {
                    if (c > '2') {
                        evt.consume();
                    }
                }
                if (fevrier == true && c == '2') {
                    evt.consume();
                    jLabel2.setText("Le mois de Février n'a pas plus de 29 jours maximums!");
                    dateDivorce.setText("");
                }
                jLabel2.setText("");
                if (mois31 == true && verif == true) {
                    if (c == '4' || c == '6' || c == '9') {
                        evt.consume();
                        jLabel2.setText("Ce mois ne possède que 30 jours!");
                        dateDivorce.setText("");
                    }
                    jLabel2.setText("");
                    if (novembre == true && verif == true) {
                        if (c == '1') {
                            evt.consume();
                            jLabel2.setText("Ce mois ne possède que 30 jours!");
                            dateDivorce.setText("");
                        }
                        jLabel2.setText("");
                    }
                }
            }
            if (dateDivorce.getDocument().getLength() == 5) {
                evt.setKeyChar('/');
            }
            if (dateDivorce.getDocument().getLength() == 6) {
                if (c > '2' || c < '1') { // On autorise les années entre 1000 et 2999
                    evt.consume();
                }
                
            }
        }
        try {
            if (dateDivorce.getDocument().getLength() == 10) {
                String dateString = dateDivorce.getText() + c;
                Date tempDate;

                tempDate = new SimpleDateFormat("dd/MM/yyyy").parse(dateString);

                String jourEnLettres = new SimpleDateFormat("EEEE", Locale.FRANCE).format(tempDate);

                // On affiche le jour à l'utilisateur.
                javax.swing.JOptionPane.showMessageDialog(
                        null,
                        dateString + " correspond à un " + jourEnLettres,
                        "Date",
                        javax.swing.JOptionPane.INFORMATION_MESSAGE
                );
            }
        } catch (ParseException ex) {
            Logger.getLogger(AjouterDivorce.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_gestionDate

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AjouterDivorce.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AjouterDivorce.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AjouterDivorce.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AjouterDivorce.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                AjouterDivorce dialog = new AjouterDivorce(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField dateDivorce;
    private javax.swing.JList divorce1;
    private javax.swing.JButton divorcer;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
    javax.swing.DefaultListModel<String> listModelVIP1;
    javax.swing.DefaultListModel<String> listModelCouples;
    AccesBD ajout = new AccesBD();
    boolean verif, fevrier, mois31, novembre;
}
